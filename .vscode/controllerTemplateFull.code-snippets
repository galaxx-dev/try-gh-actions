{
  // Place your try_gh_actions workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Generate template controller [FULL]": {
    "scope": "typescript",
    "prefix": ["gtcf", "gcf"],
    "body": [
      "import { Request, Response } from 'express'",
      "import { apiResponse, ErrorCode } from '../helpers/apiHelper'",
      "import { apiErrorLog } from '../helpers/loggerHelper'",
      "import prismaClient from '../helpers/prismaHelper'",
      "",
      "const prisma = prismaClient",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} {",
      "  /**",
      "   * Index method",
      "   *",
      "   * @param req Request from express",
      "   * @param res Response from express",
      "   * @returns Promise of Response",
      "   */",
      "  public static index = async (req: Request, res: Response): Promise<Response> => {",
      "    const ${3:data} = await prisma.${2:data}.${4:findMany}($5)$0",
      "",
      "    try {",
      "      return apiResponse(res, {",
      "        statusCode: 200,",
      "        statusMessage: 'fetched success.',",
      "        payload: '',",
      "      })",
      "    } catch (e) {",
      "      apiErrorLog(e)",
      "",
      "      return apiResponse(res, {",
      "        statusCode: 400,",
      "        errorCode: ErrorCode.TEMPLATE_001,",
      "        statusMessage: 'Something wrong...',",
      "      })",
      "    }",
      "  }",
      "",
      "  /**",
      "   * Store method",
      "   *",
      "   * @param req Request from express",
      "   * @param res Response from express",
      "   * @returns Promise of Response",
      "   */",
      "  public static store = async (req: Request, res: Response): Promise<Response> => {",
      "    try {",
      "      return apiResponse(res, {",
      "        statusCode: 200,",
      "        statusMessage: 'fetched success.',",
      "        payload: '',",
      "      })",
      "    } catch (e) {",
      "      apiErrorLog(e)",
      "",
      "      return apiResponse(res, {",
      "        statusCode: 400,",
      "        errorCode: ErrorCode.TEMPLATE_001,",
      "        statusMessage: 'Something wrong...',",
      "      })",
      "    }",
      "  }",
      "",
      "  /**",
      "   * Create method",
      "   *",
      "   * @param req Request from express",
      "   * @param res Response from express",
      "   * @returns Promise of Response",
      "   *",
      "   */",
      "  public static create = async (req: Request, res: Response): Promise<Response> => {",
      "    try {",
      "      return apiResponse(res, {",
      "        statusCode: 200,",
      "        statusMessage: 'fetched success.',",
      "        payload: '',",
      "      })",
      "    } catch (e) {",
      "      apiErrorLog(e)",
      "",
      "      return apiResponse(res, {",
      "        statusCode: 400,",
      "        errorCode: ErrorCode.TEMPLATE_001,",
      "        statusMessage: 'Something wrong...',",
      "      })",
      "    }",
      "  }",
      "",
      "  /**",
      "   * Show method",
      "   *",
      "   * @param req Request from express",
      "   * @param res Response from express",
      "   * @returns Promise of Response",
      "   */",
      "  public static show = async (req: Request, res: Response): Promise<Response> => {",
      "    try {",
      "      return apiResponse(res, {",
      "        statusCode: 200,",
      "        statusMessage: 'fetched success.',",
      "        payload: '',",
      "      })",
      "    } catch (e) {",
      "      apiErrorLog(e)",
      "",
      "      return apiResponse(res, {",
      "        statusCode: 400,",
      "        errorCode: ErrorCode.TEMPLATE_001,",
      "        statusMessage: 'Something wrong...',",
      "      })",
      "    }",
      "  }",
      "",
      "  /**",
      "   * Update method",
      "   *",
      "   * @param req Request from express",
      "   * @param res Response from express",
      "   * @returns Promise of Response",
      "   */",
      "  public static update = async (req: Request, res: Response): Promise<Response> => {",
      "    try {",
      "      return apiResponse(res, {",
      "        statusCode: 200,",
      "        statusMessage: 'fetched success.',",
      "        payload: '',",
      "      })",
      "    } catch (e) {",
      "      apiErrorLog(e)",
      "",
      "      return apiResponse(res, {",
      "        statusCode: 400,",
      "        errorCode: ErrorCode.TEMPLATE_001,",
      "        statusMessage: 'Something wrong...',",
      "      })",
      "    }",
      "  }",
      "",
      "  /**",
      "   * Destroy method",
      "   *",
      "   * @param req Request from express",
      "   * @param res Response from express",
      "   * @returns Promise of Response",
      "   */",
      "  public static destroy = async (req: Request, res: Response): Promise<Response> => {",
      "    try {",
      "      return apiResponse(res, {",
      "        statusCode: 200,",
      "        statusMessage: 'fetched success.',",
      "        payload: '',",
      "      })",
      "    } catch (e) {",
      "      apiErrorLog(e)",
      "",
      "      return apiResponse(res, {",
      "        statusCode: 400,",
      "        errorCode: ErrorCode.TEMPLATE_001,",
      "        statusMessage: 'Something wrong...',",
      "      })",
      "    }",
      "  }",
      "",
      "  /**",
      "   * Edit method",
      "   *",
      "   * @param req Request from express",
      "   * @param res Response from express",
      "   * @returns Promise of Response",
      "   */",
      "  public static edit = async (req: Request, res: Response): Promise<Response> => {",
      "    try {",
      "      return apiResponse(res, {",
      "        statusCode: 200,",
      "        statusMessage: 'fetched success.',",
      "        payload: '',",
      "      })",
      "    } catch (e) {",
      "      apiErrorLog(e)",
      "",
      "      return apiResponse(res, {",
      "        statusCode: 400,",
      "        errorCode: ErrorCode.TEMPLATE_001,",
      "        statusMessage: 'Something wrong...',",
      "      })",
      "    }",
      "  }",
      "}",
      ""
    ],
    "description": "Generate full template for controller"
  },
  "Generate template controller [CORE]": {
    "scope": "typescript",
    "prefix": ["gtcc", "gcc"],
    "body": [
      "import { Request, Response } from 'express'",
      "import { apiResponse, ErrorCode } from '../helpers/apiHelper'",
      "import { apiErrorLog } from '../helpers/loggerHelper'",
      "import prismaClient from '../helpers/prismaHelper'",
      "",
      "const prisma = prismaClient",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} {",
      "  /**",
      "   * Index method",
      "   *",
      "   * @param req Request from express",
      "   * @param res Response from express",
      "   * @returns Promise of Response",
      "   */",
      "  public static index = async (req: Request, res: Response): Promise<Response> => {",
      "    const ${3:data} = await prisma.${2:data}.${4:findMany}($5)$0",
      "",
      "    try {",
      "      return apiResponse(res, {",
      "        statusCode: 200,",
      "        statusMessage: 'fetched success.',",
      "        payload: '',",
      "      })",
      "    } catch (e) {",
      "      apiErrorLog(e)",
      "",
      "      return apiResponse(res, {",
      "        statusCode: 400,",
      "        errorCode: ErrorCode.TEMPLATE_001,",
      "        statusMessage: 'Something wrong...',",
      "      })",
      "    }",
      "  }",
      "}",
      ""
    ],
    "description": "Generate only core template for controller"
  },
  "Generate template controller [METHOD]": {
    "scope": "typescript",
    "prefix": ["gtcm", "gcm"],
    "body": [
      "/**",
      " * ${1:methodName} method",
      " *",
      " * @param req Request from express",
      " * @param res Response from express",
      " * @returns Promise of Response",
      " */",
      "public static ${1:methodName} = async (req: Request, res: Response): Promise<Response> => {",
      "  const ${3:data} = await prisma.${2:data}.${4:findMany}($5)$0",
      "",
      "  try {",
      "    return apiResponse(res, {",
      "      statusCode: 200,",
      "      statusMessage: 'fetched success.',",
      "      payload: '',",
      "    })",
      "  } catch (e) {",
      "    apiErrorLog(e)",
      "",
      "    return apiResponse(res, {",
      "      statusCode: 400,",
      "      errorCode: ErrorCode.TEMPLATE_001,",
      "      statusMessage: 'Something wrong...',",
      "    })",
      "  }",
      "}",
      ""
    ],
    "description": "Generate only one method for controller"
  },
  "Generate template router [FULL]": {
    "scope": "typescript",
    "prefix": ["gtrf", "grf"],
    "body": [
      "import { Router } from 'express'",
      "import notYetImplemented from '../controllers/NotYetImplementedController'",
      "import ${2:Name}Controller from '../controllers/${2:Name}Controller'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = Router()$0",
      "",
      "${1:${TM_FILENAME_BASE}}",
      "  .route('/')",
      "  .get(${2:Name}Controller.index)",
      "  .post(${2:Name}Controller.store)",
      "  .put(notYetImplemented)",
      "  .patch(notYetImplemented)",
      "  .delete(notYetImplemented)",
      "",
      "${1:${TM_FILENAME_BASE}}",
      "  .route('/create')",
      "  .get(${2:Name}Controller.create)",
      "  .put(notYetImplemented)",
      "  .patch(notYetImplemented)",
      "  .delete(notYetImplemented)",
      "",
      "${1:${TM_FILENAME_BASE}}",
      "  .route('/:id')",
      "  .get(${2:Name}Controller.show)",
      "  .post(notYetImplemented)",
      "  .put(${2:Name}Controller.update)",
      "  .patch(${2:Name}Controller.update)",
      "  .delete(${2:Name}Controller.destroy)",
      "",
      "${1:${TM_FILENAME_BASE}}",
      "  .route('/:id/edit')",
      "  .get(${2:Name}Controller.edit)",
      "  .post(notYetImplemented)",
      "  .put(notYetImplemented)",
      "  .patch(notYetImplemented)",
      "  .delete(notYetImplemented)",
      "",
      "export { ${1:${TM_FILENAME_BASE}} }",
      ""
    ],
    "description": "Generate full template for router"
  }
}
